"use strict";(self.webpackChunkz_paging_doc=self.webpackChunkz_paging_doc||[]).push([[817],{8108:(e,t,d)=>{d.r(t),d.d(t,{data:()=>l});const l={key:"v-34234222",path:"/start/performance.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"性能与建议",slug:"性能与建议",children:[]}],filePathRelative:"start/performance.md",git:{updatedTime:1629561936e3}}},4775:(e,t,d)=>{d.r(t),d.d(t,{default:()=>n});const l=(0,d(6252).uE)('<h2 id="性能与建议" tabindex="-1"><a class="header-anchor" href="#性能与建议" aria-hidden="true">#</a> 性能与建议</h2><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">使用内置scroll-view滚动</th><th style="text-align:center;">使用页面滚动</th><th style="text-align:center;">使用nvue</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>说明</strong></td><td style="text-align:center;">默认模式，<code>z-paging</code>需要有确定的高度，下拉刷新与上拉加载更多由<code>z-paging</code>内部处理，配置简单。</td><td style="text-align:center;"><code>use-page-scroll</code>设置为true时生效，使用页面滚动而非内置scroll-view滚动，无需固定<code>z-paging</code>的高度，但需要在页面滚动到底部时调用<code>z-paging</code>的<code>doLoadMore()</code>方法。<br>当使用页面的下拉刷新时，需要引入mixin(可全局引入)，具体可参见demo。</td><td style="text-align:center;">创建nvue页面并引入<code>z-paging</code>且运行在APP上生效，<code>z-paging</code>将使用nvue独有的<code>&lt;list&gt;</code>和<code>&lt;refresh&gt;</code>代替原有的scroll-view和自定义的下拉刷新，可大幅提升性能。</td></tr><tr><td style="text-align:center;"><strong>性能</strong></td><td style="text-align:center;">不佳</td><td style="text-align:center;">一般</td><td style="text-align:center;">优</td></tr><tr><td style="text-align:center;"><strong>优缺点</strong></td><td style="text-align:center;">【优点】配置简单、耦合度低。普通的简单列表不会有明显卡顿。<br>【缺点】需要固定<code>z-paging</code>高度，超出页面部分渲染的资源无法自动回收，当列表item比较复杂或数据量过多时，可能会造成明显卡顿。</td><td style="text-align:center;">【优点】性能优于使用内置的scroll-view滚动，超出页面部分渲染的资源会自动回收，能适应绝大多数列表滚动的情况，即使列表item比较复杂，一般也不会感知到卡顿。<br>【缺点】配置略麻烦，耦合度较高。</td><td style="text-align:center;">【优点】原生渲染，极致性能，<code>&lt;list&gt;</code>组件在不可见部分的渲染资源回收有特殊的优化处理，<code>&lt;refresh&gt;</code>组件是app端独有的下拉刷新组件，性能远超普通vue页面中的自定义下拉刷新。<br>【缺点】仅App端支持，nvue页面写法不如vue页面方便，在<code>z-paging</code>中一些配置和方法在nvue中不支持，且nvue页面中支持的第三方组件也比vue页面少。</td></tr></tbody></table><h4 id="【总结】" tabindex="-1"><a class="header-anchor" href="#【总结】" aria-hidden="true">#</a> 【总结】</h4><ul><li>如果项目列表item比较简单，分页数据量不是特别多，建议使用默认的「内置scroll-view滚动」。</li><li>如果项目列表item比较复杂，数据量多，且使用「内置scroll-view滚动」时卡顿明显，建议使用页面滚动。</li><li>如果是App项目，且对性能和细节有较高要求，建议在nvue中使用<code>z-paging</code>。</li></ul>',4),n={render:function(e,t){return l}}}}]);